{"version":3,"sources":["PageScrollProgress/index.tsx","App.tsx","serviceWorker.ts","index.tsx","IndeterminateLoadingIndicator/index.tsx"],"names":["React","scrollPosition","setScrollPosition","calculateScrollDistance","scrollTop","window","pageYOffset","winHeight","innerHeight","totalDocScrollLength","bodyExists","document","body","docElExists","documentElement","Math","max","scrollHeight","offsetHeight","clientHeight","getDocHeight","currentScrollPostion","floor","scrollEvent","requestAnimationFrame","addEventListener","removeEventListener","barBackground","style","position","background","width","height","zIndex","HistoryPage","lazy","MainPage","NotFoundPage","App","fallback","IndeterminateLoadingIndicator","path","element","Boolean","location","hostname","match","l","search","q","slice","split","forEach","v","a","join","replace","undefined","p","history","replaceState","pathname","hash","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","className","color","size"],"mappings":"kRAsDeA,UApDY,WAAO,IAAD,EACaA,WAAuB,GADpC,mBACxBC,EADwB,KACRC,EADQ,KAgBzBC,EAA0B,WAC9B,IAAMC,EAAoBC,OAAOC,YAC3BC,EAAoBF,OAAOG,YAG3BC,EAlBa,WACnB,IAAMC,EAAwC,OAAlBC,SAASC,KAC/BC,EAAoD,OAA7BF,SAASG,gBACtC,OAAOC,KAAKC,IACVN,EAAaC,SAASC,KAAKK,aAAe,EAC1CJ,EAAcF,SAASG,gBAAgBG,aAAe,EACtDP,EAAaC,SAASC,KAAKM,aAAe,EAC1CL,EAAcF,SAASG,gBAAgBI,aAAe,EACtDR,EAAaC,SAASC,KAAKO,aAAe,EAC1CN,EAAcF,SAASG,gBAAgBK,aAAe,GAO9BC,GAEuBb,EAC3Cc,EAA+BN,KAAKO,MACvClB,EAAYK,EAAwB,KAGvCP,EAAkBmB,IAGdE,EAAc,WAClBC,sBAAsBrB,IAGxBH,aAAgB,WAEd,OADAW,SAASc,iBAAiB,SAAUF,GAC7B,kBAAMlB,OAAOqB,oBAAoB,SAAUH,OAGpD,IAAMI,EAAa,6DAAyD1B,EAAzD,qBACnB,OACE,uBACE2B,MAAO,CACLC,SAAU,QACVC,WAAYH,EACZI,MAAO,OACPC,OAAQ,MACRC,OAAQ,YCzCVC,EAAcC,gBAAK,kBAAM,iCACzBC,EAAWD,gBAAK,kBAAM,kCACtBE,EAAeF,gBAAK,kBAAM,iCAkBjBG,EAhBH,kBACV,oCACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAU,kBAACC,EAAA,EAAD,OAClB,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAOC,KAAK,WAAWC,QAAS,kBAACR,EAAD,QAChC,kBAAC,IAAD,CAAOO,KAAK,IAAIC,QAAS,kBAACN,EAAD,QACzB,kBAAC,IAAD,CAAOK,KAAK,IAAIC,QAAS,kBAACL,EAAD,aCRfM,QACW,cAA7BtC,OAAOuC,SAASC,UAEe,UAA7BxC,OAAOuC,SAASC,UAEhBxC,OAAOuC,SAASC,SAASC,MACvB,4DCIN,SAAEC,GACA,GAAIA,EAAEC,OAAQ,CACZ,IAAMC,EAAiC,GACvCF,EAAEC,OACCE,MAAM,GACNC,MAAM,KACNC,SAAQ,SAACC,GACR,IAAMC,EAAcD,EAAEF,MAAM,KAC5BF,EAAEK,EAAE,IAAMA,EAAEJ,MAAM,GAAGK,KAAK,KAAKC,QAAQ,SAAU,aAEzCC,IAARR,EAAES,GACJrD,OAAOsD,QAAQC,aACb,KACQ,GACRb,EAAEc,SAASX,MAAM,GAAI,IAAMD,EAAES,GAAK,KAAOT,EAAEA,EAAF,WAAUA,EAAEA,GAAM,IAAMF,EAAEe,OAd3E,CAkBGzD,OAAOuC,UAGVmB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtD,SAASuD,eAAe,SDyFpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a,+BE9I5B,oCAYepC,IANuB,kBACpC,uBAAKqC,UAAU,WACb,gBAAC,IAAD,CAAcC,MAAM,UAAUC,KAAM,U","file":"static/js/main.2b82c791.chunk.js","sourcesContent":["import * as React from \"react\";\n\nconst PageScrollProgress = () => {\n  const [scrollPosition, setScrollPosition] = React.useState<number>(0);\n\n  const getDocHeight = (): number => {\n    const bodyExists: boolean = document.body !== null;\n    const docElExists: boolean = document.documentElement !== null;\n    return Math.max(\n      bodyExists ? document.body.scrollHeight : 0,\n      docElExists ? document.documentElement.scrollHeight : 0,\n      bodyExists ? document.body.offsetHeight : 0,\n      docElExists ? document.documentElement.offsetHeight : 0,\n      bodyExists ? document.body.clientHeight : 0,\n      docElExists ? document.documentElement.clientHeight : 0\n    );\n  };\n\n  const calculateScrollDistance = (): void => {\n    const scrollTop: number = window.pageYOffset; // how much the user has scrolled by\n    const winHeight: number = window.innerHeight;\n    const docHeight: number = getDocHeight();\n\n    const totalDocScrollLength: number = docHeight - winHeight;\n    const currentScrollPostion: number = Math.floor(\n      (scrollTop / totalDocScrollLength) * 100\n    );\n\n    setScrollPosition(currentScrollPostion);\n  };\n\n  const scrollEvent = (): void => {\n    requestAnimationFrame(calculateScrollDistance);\n  };\n\n  React.useEffect(() => {\n    document.addEventListener(\"scroll\", scrollEvent);\n    return () => window.removeEventListener(\"scroll\", scrollEvent);\n  });\n\n  const barBackground = `linear-gradient(to right, rgba(255, 255, 255, 0.9) ${scrollPosition}%, transparent 0)`;\n  return (\n    <div\n      style={{\n        position: \"fixed\",\n        background: barBackground,\n        width: \"100%\",\n        height: \"6px\",\n        zIndex: 10001,\n      }}\n    />\n  );\n};\n\nexport default React.memo(PageScrollProgress);\n","import React, { Suspense, lazy } from \"react\";\n\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\nimport IndeterminateLoadingIndicator from \"./IndeterminateLoadingIndicator\";\nimport PageScrollProgress from \"./PageScrollProgress\";\n// const RegistrationPage = lazy(() => import(\"./RegistrationPage\"));\nconst HistoryPage = lazy(() => import(\"./HistoryPage\"));\nconst MainPage = lazy(() => import(\"./MainPage\"));\nconst NotFoundPage = lazy(() => import(\"./NotFoundPage\"));\n\nconst App = (): JSX.Element => (\n  <>\n    <PageScrollProgress />\n    <Router>\n      <Suspense fallback={<IndeterminateLoadingIndicator />}>\n        <Routes>\n          {/* <Route path=\"/registration\" element={<RegistrationPage />} /> */}\n          <Route path=\"/history\" element={<HistoryPage />} />\n          <Route path=\"/\" element={<MainPage />} />\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Routes>\n      </Suspense>\n    </Router>\n  </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister(): void {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n// import reportWebVitals from \"./reportWebVitals\";\n\n// Redirect to /2020v2:\n// window.location.href = \"https://hacktj.org/2020v2\";\n\n// Start Single Page Apps for GitHub Pages\n// Single Page Apps for GitHub Pages\n// https://github.com/rafrex/spa-github-pages\n// Copyright (c) 2016 Rafael Pedicini, licensed under the MIT License\n// ----------------------------------------------------------------------\n// This script checks to see if a redirect is present in the query string\n// and converts it back into the correct url and adds it to the\n// browser's history using window.history.replaceState(...),\n// which won't cause the browser to attempt to load the new url.\n// When the single page app is loaded further down in this file,\n// the correct url will be waiting in the browser's history for\n// the single page app to route accordingly.\n((l) => {\n  if (l.search) {\n    const q: { [param: string]: string } = {};\n    l.search\n      .slice(1)\n      .split(\"&\")\n      .forEach((v) => {\n        const a: string[] = v.split(\"=\");\n        q[a[0]] = a.slice(1).join(\"=\").replace(/~and~/g, \"&\");\n      });\n    if (q.p !== undefined) {\n      window.history.replaceState(\n        null,\n        null || \"\",\n        l.pathname.slice(0, -1) + (q.p || \"\") + (q.q ? `?${q.q}` : \"\") + l.hash\n      );\n    }\n  }\n})(window.location);\n// End Single Page Apps for GitHub Pages\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","import * as React from \"react\";\n\nimport \"./index.css\";\n\nimport BounceLoader from \"react-spinners/BounceLoader\";\n\nconst IndeterminateLoadingIndicator = (): JSX.Element => (\n  <div className=\"loading\">\n    <BounceLoader color=\"#65d861\" size={120} />\n  </div>\n);\n\nexport default IndeterminateLoadingIndicator;\n"],"sourceRoot":""}