{"version":3,"sources":["IndeterminateLoadingIndicator/index.jsx","PageScrollProgress/index.jsx","App.js","serviceWorker.js","index.js"],"names":["IndeterminateLoadingIndicator","className","xmlns","viewBox","cx","cy","r","PageScrollProgress","useState","scrollPosition","setScrollPosition","getDocHeight","Math","max","document","body","scrollHeight","documentElement","offsetHeight","clientHeight","scrollEvent","requestAnimationFrame","scrollTop","window","pageYOffset","winHeight","innerHeight","totalDocScrollLength","currentScrollPostion","floor","calculateScrollDistance","useEffect","addEventListener","removeEventListener","style","position","background","width","height","zIndex","RegistrationPage","lazy","HistoryPage","MainPage","NotFoundPage","App","fallback","exact","path","component","Boolean","location","hostname","match","l","search","q","slice","split","forEach","v","a","join","replace","undefined","p","history","replaceState","pathname","hash","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kQAkBeA,G,MAduB,kBACpC,yBAAKC,UAAU,WACb,yBACEC,MAAM,8BACNC,QAAQ,cACRF,UAAU,YAEV,4BAAQG,GAAG,KAAKC,GAAG,KAAKC,EAAE,KAAKL,UAAU,SAEzC,4BAAQG,GAAG,KAAKC,GAAG,KAAKC,EAAE,KAAKL,UAAU,e,QCyChCM,EApDY,WAAO,IAAD,EACaC,mBAAS,GADtB,mBACxBC,EADwB,KACRC,EADQ,KAgBzBC,EAAe,WACnB,OAAOC,KAAKC,IACVC,SAASC,KAAKC,aACdF,SAASG,gBAAgBD,aACzBF,SAASC,KAAKG,aACdJ,SAASG,gBAAgBC,aACzBJ,SAASC,KAAKI,aACdL,SAASG,gBAAgBE,eAIvBC,EAAc,WAClBC,uBAAsB,YAzBQ,WAC9B,IAAMC,EAAYC,OAAOC,YACnBC,EAAYF,OAAOG,YAGnBC,EAFYhB,IAEuBc,EACnCG,EAAuBhB,KAAKiB,MAC/BP,EAAYK,EAAwB,KAGvCjB,EAAkBkB,GAgBhBE,OASJ,OALAC,qBAAU,WAER,OADAjB,SAASkB,iBAAiB,SAAUZ,GAC7B,kBAAMG,OAAOU,oBAAoB,SAAUb,OAIlD,yBACEc,MAAO,CACLC,SAAU,QACVC,WAAW,sDAAD,OAC8C3B,EAD9C,qBAEV4B,MAAO,OACPC,OAAQ,MACRC,OAAQ,UC1CVC,EAAmBC,gBAAK,kBAAM,8DAC9BC,EAAcD,gBAAK,kBAAM,8DACzBE,EAAWF,gBAAK,kBAAM,qEACtBG,EAAeH,gBAAK,kBAAM,8DAoBjBI,EAlBH,WACV,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAS,kBAAC,EAAD,OACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,gBAAgBC,UAAWT,IAC7C,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,WAAWC,UAAWP,IACxC,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,IAAIC,UAAWN,IACjC,kBAAC,IAAD,CAAOK,KAAK,IAAIC,UAAWL,SCTnBM,QACW,cAA7B3B,OAAO4B,SAASC,UAEe,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAASC,MACvB,4DCGN,SAAUC,GACR,GAAIA,EAAEC,OAAQ,CACZ,IAAIC,EAAI,GACRF,EAAEC,OACCE,MAAM,GACNC,MAAM,KACNC,SAAQ,SAASC,GAChB,IAAIC,EAAID,EAAEF,MAAM,KAChBF,EAAEK,EAAE,IAAMA,EACPJ,MAAM,GACNK,KAAK,KACLC,QAAQ,SAAU,aAEbC,IAARR,EAAES,GACJ1C,OAAO2C,QAAQC,aACb,KACA,KACAb,EAAEc,SAASX,MAAM,GAAI,IAAMD,EAAES,GAAK,KAAOT,EAAEA,EAAI,IAAMA,EAAEA,EAAI,IAAMF,EAAEe,OAjB3E,CAqBG9C,OAAO4B,UAGVmB,IAASC,OAAO,kBAAC,EAAD,MAASzD,SAAS0D,eAAe,SDoF3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.622662e2.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./index.css\";\n\nconst IndeterminateLoadingIndicator = () => (\n  <div className=\"loading\">\n    <svg\n      xmlns=\"https://www.w3.org/2000/svg\"\n      viewBox=\"-1 -1 34 34\"\n      className=\"progress\"\n    >\n      <circle cx=\"16\" cy=\"16\" r=\"16\" className=\"weak\" />\n\n      <circle cx=\"16\" cy=\"16\" r=\"16\" className=\"strong\" />\n    </svg>\n  </div>\n);\n\nexport default IndeterminateLoadingIndicator;\n","import React, { useState, useEffect } from \"react\";\n\nconst PageScrollProgress = () => {\n  const [scrollPosition, setScrollPosition] = useState(0);\n\n  const calculateScrollDistance = () => {\n    const scrollTop = window.pageYOffset; // how much the user has scrolled by\n    const winHeight = window.innerHeight;\n    const docHeight = getDocHeight();\n\n    const totalDocScrollLength = docHeight - winHeight;\n    const currentScrollPostion = Math.floor(\n      (scrollTop / totalDocScrollLength) * 100\n    );\n\n    setScrollPosition(currentScrollPostion);\n  };\n\n  const getDocHeight = () => {\n    return Math.max(\n      document.body.scrollHeight,\n      document.documentElement.scrollHeight,\n      document.body.offsetHeight,\n      document.documentElement.offsetHeight,\n      document.body.clientHeight,\n      document.documentElement.clientHeight\n    );\n  };\n\n  const scrollEvent = () => {\n    requestAnimationFrame(() => {\n      calculateScrollDistance();\n    });\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"scroll\", scrollEvent);\n    return () => window.removeEventListener(\"scroll\", scrollEvent);\n  });\n\n  return (\n    <div\n      style={{\n        position: \"fixed\",\n        background:\n          `linear-gradient(to right, rgba(255, 255, 255, 0.9) ${scrollPosition}%, transparent 0)`,\n        width: \"100%\",\n        height: \"6px\",\n        zIndex: 10001\n      }}\n    ></div>\n  );\n};\n\nexport default PageScrollProgress;\n","import React, { Suspense, lazy } from \"react\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport IndeterminateLoadingIndicator from \"./IndeterminateLoadingIndicator\";\nimport PageScrollProgress from \"./PageScrollProgress\";\nconst RegistrationPage = lazy(() => import(\"./RegistrationPage\"));\nconst HistoryPage = lazy(() => import(\"./HistoryPage\"));\nconst MainPage = lazy(() => import(\"./MainPage\"));\nconst NotFoundPage = lazy(() => import(\"./NotFoundPage\"));\n\nconst App = () => {\n  return (\n    <>\n      <PageScrollProgress />\n      <Router>\n        <Suspense fallback=<IndeterminateLoadingIndicator />>\n          <Switch>\n            <Route exact path=\"/registration\" component={RegistrationPage} />\n            <Route exact path=\"/history\" component={HistoryPage} />\n            <Route exact path=\"/\" component={MainPage} />\n            <Route path=\"*\" component={NotFoundPage} />\n          </Switch>\n        </Suspense>\n      </Router>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// Redirect to /2020:\n// window.location.href = \"https://hacktj.org/2020\";\n\n// Start Single Page Apps for GitHub Pages\n// Single Page Apps for GitHub Pages\n// https://github.com/rafrex/spa-github-pages\n// Copyright (c) 2016 Rafael Pedicini, licensed under the MIT License\n// ----------------------------------------------------------------------\n// This script checks to see if a redirect is present in the query string\n// and converts it back into the correct url and adds it to the\n// browser's history using window.history.replaceState(...),\n// which won't cause the browser to attempt to load the new url.\n// When the single page app is loaded further down in this file,\n// the correct url will be waiting in the browser's history for\n// the single page app to route accordingly.\n(function(l) {\n  if (l.search) {\n    var q = {};\n    l.search\n      .slice(1)\n      .split(\"&\")\n      .forEach(function(v) {\n        var a = v.split(\"=\");\n        q[a[0]] = a\n          .slice(1)\n          .join(\"=\")\n          .replace(/~and~/g, \"&\");\n      });\n    if (q.p !== undefined) {\n      window.history.replaceState(\n        null,\n        null,\n        l.pathname.slice(0, -1) + (q.p || \"\") + (q.q ? \"?\" + q.q : \"\") + l.hash\n      );\n    }\n  }\n})(window.location);\n// End Single Page Apps for GitHub Pages\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}