{"version":3,"sources":["IndeterminateLoadingIndicator/index.jsx","PageScrollProgress/index.jsx","App.js","serviceWorker.js","index.js"],"names":["IndeterminateLoadingIndicator","className","xmlns","viewBox","cx","cy","r","memo","barBackground","useState","scrollPosition","setScrollPosition","calculateScrollDistance","scrollTop","window","pageYOffset","winHeight","innerHeight","totalDocScrollLength","bodyExists","document","body","docElExists","documentElement","Math","max","scrollHeight","offsetHeight","clientHeight","getDocHeight","currentScrollPostion","floor","scrollEvent","requestAnimationFrame","useEffect","addEventListener","removeEventListener","isMobileOrTablet","a","check","navigator","userAgent","vendor","opera","test","substr","style","position","background","width","height","zIndex","RegistrationPage","lazy","HistoryPage","MainPage","NotFoundPage","App","StrictMode","fallback","exact","path","component","Boolean","location","hostname","match","l","search","q","slice","split","forEach","v","join","replace","undefined","p","history","replaceState","pathname","hash","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ce6c98d1.chunk.js","sourcesContent":["// @flow\nimport * as React from \"react\";\n\nimport \"./index.css\";\n\nconst IndeterminateLoadingIndicator: React.StatelessFunctionalComponent<{}> = (): React.Element<\n  \"div\"\n> => (\n  <div className=\"loading\">\n    <svg\n      xmlns=\"https://www.w3.org/2000/svg\"\n      viewBox=\"-1 -1 34 34\"\n      className=\"progress\"\n    >\n      <circle cx=\"16\" cy=\"16\" r=\"16\" className=\"weak\" />\n      <circle cx=\"16\" cy=\"16\" r=\"16\" className=\"strong\" />\n    </svg>\n  </div>\n);\n\nexport default IndeterminateLoadingIndicator;\n","// @flow\nimport React, { useState, useEffect, memo } from \"react\";\nimport type { Element } from \"react\";\n\nconst PageScrollProgress = (): Element<\"div\"> => {\n  const [scrollPosition, setScrollPosition] = useState<number>(0);\n\n  const getDocHeight = (): number => {\n    // TODO: Flow still returns errors\n    const bodyExists: boolean = document.body !== null;\n    const docElExists: boolean = document.documentElement !== null;\n    return Math.max(\n      bodyExists ? document.body.scrollHeight : 0,\n      docElExists ? document.documentElement.scrollHeight : 0,\n      bodyExists ? document.body.offsetHeight : 0,\n      docElExists ? document.documentElement.offsetHeight : 0,\n      bodyExists ? document.body.clientHeight : 0,\n      docElExists ? document.documentElement.clientHeight : 0\n    );\n  };\n\n  const calculateScrollDistance = (): void => {\n    const scrollTop: number = window.pageYOffset; // how much the user has scrolled by\n    const winHeight: number = window.innerHeight;\n    const docHeight: number = getDocHeight();\n\n    const totalDocScrollLength: number = docHeight - winHeight;\n    const currentScrollPostion: number = Math.floor(\n      (scrollTop / totalDocScrollLength) * 100\n    );\n\n    setScrollPosition(currentScrollPostion);\n  };\n\n  const scrollEvent = (): void => {\n    requestAnimationFrame(() => {\n      calculateScrollDistance();\n    });\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"scroll\", scrollEvent);\n    return () => window.removeEventListener(\"scroll\", scrollEvent);\n  });\n\n  window.isMobileOrTablet = (): boolean => {\n    var check: boolean = false;\n    (function(a) {\n      if (\n        /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n          a\n        ) ||\n        /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw(n|u)|c55\\/|capi|ccwa|cdm|cell|chtm|cldc|cmd|co(mp|nd)|craw|da(it|ll|ng)|dbte|dcs|devi|dica|dmob|do(c|p)o|ds(12|d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(|_)|g1 u|g560|gene|gf5|gmo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd(m|p|t)|hei|hi(pt|ta)|hp( i|ip)|hsc|ht(c(| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i(20|go|ma)|i230|iac( ||\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|[a-w])|libw|lynx|m1w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|mcr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|([1-8]|c))|phil|pire|pl(ay|uc)|pn2|po(ck|rt|se)|prox|psio|ptg|qaa|qc(07|12|21|32|60|[2-7]|i)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h|oo|p)|sdk\\/|se(c(|0|1)|47|mc|nd|ri)|sgh|shar|sie(|m)|sk0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h|v|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl|tdg|tel(i|m)|tim|tmo|to(pl|sh)|ts(70|m|m3|m5)|tx9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas|your|zeto|zte/i.test(\n          a.substr(0, 4)\n        )\n      )\n        check = true;\n    })(navigator.userAgent || navigator.vendor || window.opera);\n    return check;\n  };\n\n  var barBackground: string;\n  if (window.isMobileOrTablet()) {\n    barBackground = `linear-gradient(to right, rgba(101, 216, 97, 0.9) ${scrollPosition}%, transparent 0)`;\n  } else {\n    barBackground = `linear-gradient(to right, rgba(255, 255, 255, 0.9) ${scrollPosition}%, transparent 0)`;\n  }\n  return (\n    <div\n      style={{\n        position: \"fixed\",\n        background: barBackground,\n        width: \"100%\",\n        height: \"6px\",\n        zIndex: 10001\n      }}\n    ></div>\n  );\n};\n\nexport default memo<{}>(PageScrollProgress);\n","// @flow\nimport React, { Suspense, lazy } from \"react\";\nimport type { StatelessFunctionalComponent, Element } from \"react\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport IndeterminateLoadingIndicator from \"./IndeterminateLoadingIndicator\";\nimport PageScrollProgress from \"./PageScrollProgress\";\nconst RegistrationPage = lazy(() => import(\"./RegistrationPage\"));\nconst HistoryPage = lazy(() => import(\"./HistoryPage\"));\nconst MainPage = lazy(() => import(\"./MainPage\"));\nconst NotFoundPage = lazy(() => import(\"./NotFoundPage\"));\n\nconst App: StatelessFunctionalComponent<{}> = (): Element<\n  typeof React.StrictMode\n> => {\n  return (\n    <React.StrictMode>\n      <PageScrollProgress />\n      <Router>\n        <Suspense fallback={<IndeterminateLoadingIndicator />}>\n          <Switch>\n            <Route exact path=\"/registration\" component={RegistrationPage} />\n            <Route exact path=\"/history\" component={HistoryPage} />\n            <Route exact path=\"/\" component={MainPage} />\n            <Route path=\"*\" component={NotFoundPage} />\n          </Switch>\n        </Suspense>\n      </Router>\n    </React.StrictMode>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// Redirect to /2020:\n// window.location.href = \"https://hacktj.org/2020\";\n\n// Start Single Page Apps for GitHub Pages\n// Single Page Apps for GitHub Pages\n// https://github.com/rafrex/spa-github-pages\n// Copyright (c) 2016 Rafael Pedicini, licensed under the MIT License\n// ----------------------------------------------------------------------\n// This script checks to see if a redirect is present in the query string\n// and converts it back into the correct url and adds it to the\n// browser's history using window.history.replaceState(...),\n// which won't cause the browser to attempt to load the new url.\n// When the single page app is loaded further down in this file,\n// the correct url will be waiting in the browser's history for\n// the single page app to route accordingly.\n(function(l) {\n  if (l.search) {\n    var q = {};\n    l.search\n      .slice(1)\n      .split(\"&\")\n      .forEach(function(v) {\n        var a = v.split(\"=\");\n        q[a[0]] = a\n          .slice(1)\n          .join(\"=\")\n          .replace(/~and~/g, \"&\");\n      });\n    if (q.p !== undefined) {\n      window.history.replaceState(\n        null,\n        null,\n        l.pathname.slice(0, -1) + (q.p || \"\") + (q.q ? \"?\" + q.q : \"\") + l.hash\n      );\n    }\n  }\n})(window.location);\n// End Single Page Apps for GitHub Pages\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}