{"version":3,"sources":["Footer/footer.module.css","Footer/SocialLinks/index.tsx","Footer/index.tsx","IndeterminateLoadingIndicator/index.tsx","PageScrollProgress/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","hidden","text","style","visibility","twitter","className","target","rel","href","facebook","instagram","SocialLinks","Footer","styles","footer","middle","IndeterminateLoadingIndicator","marginLeft","marginTop","position","top","left","color","getComputedStyle","document","documentElement","getPropertyValue","size","PageScrollProgress","useState","scrollPosition","setScrollPosition","calculateScrollDistance","scrollTop","window","pageYOffset","winHeight","innerHeight","totalDocScrollLength","bodyExists","body","docElExists","Math","max","scrollHeight","offsetHeight","clientHeight","getDocHeight","currentScrollPostion","floor","scrollEvent","requestAnimationFrame","useEffect","addEventListener","removeEventListener","barBackground","background","width","height","zIndex","memo","RegistrationPage","lazy","HistoryPage","MainPage","NotFoundPage","App","fallback","path","element","Boolean","location","hostname","match","rootElement","getElementById","app","hasChildNodes","hydrate","render","navigator","serviceWorker","ready","then","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.75b99049.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"footer_footer__J0ch0\"};","import type { ReactElement } from \"react\";\n\nimport \"./index.css\";\n\nconst hidden = (text: string) => (\n  <span style={{ visibility: \"hidden\" }}>{text}</span>\n);\n\nconst twitter: ReactElement<\"a\"> = (\n  <a\n    className=\"social pe-so-twitter\"\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n    href=\"https://twitter.com/HackTJOfficial\"\n  >\n    {hidden(\"Twitter\")}\n  </a>\n);\nconst facebook: ReactElement<\"a\"> = (\n  <a\n    className=\"social pe-so-facebook empty\"\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n    href=\"https://facebook.com/HackTJOfficial\"\n  >\n    {hidden(\"Facebook\")}\n  </a>\n);\nconst instagram: ReactElement<\"a\"> = (\n  <a\n    className=\"social pe-so-instagram empty\"\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n    href=\"https://instagram.com/hacktjofficial\"\n  >\n    {hidden(\"Instagram\")}\n  </a>\n);\n\nconst SocialLinks = (): JSX.Element => (\n  <div className=\"social-links\">\n    {twitter}\n    {facebook}\n    {instagram}\n  </div>\n);\n\nexport default SocialLinks;\n","import SocialLinks from \"./SocialLinks\";\n// import MLHTrustBadge from \"./MLHTrustBadge\";\n\nimport styles from \"./footer.module.css\";\n\nconst Footer = (): JSX.Element => (\n  <>\n    <footer className={styles.footer}>\n      <div className=\"register-button-block-old bottom\">\n        <div className=\"register-text\">\n          Be sure to follow our Social Media pages for updates!\n        </div>\n        <SocialLinks />\n      </div>\n    </footer>\n    {/* <MLHTrustBadge /> */}\n  </>\n);\n\nexport default Footer;\n","import BounceLoader from \"react-spinners/BounceLoader\";\n\nconst SPINNER_SIZE = 120;\nconst middle = `calc(50% - ${SPINNER_SIZE}px / 2)`;\nconst IndeterminateLoadingIndicator = (): JSX.Element => (\n  <span\n    style={{\n      marginLeft: \"0\",\n      marginTop: \"0\",\n      position: \"absolute\",\n      top: middle,\n      left: middle,\n    }}\n  >\n    <BounceLoader\n      color={getComputedStyle(document.documentElement).getPropertyValue(\n        \"--theme-primary\"\n      )}\n      size={SPINNER_SIZE}\n    />\n  </span>\n);\n\nexport default IndeterminateLoadingIndicator;\n","import { useState, useEffect, memo } from \"react\";\n\nconst PageScrollProgress = () => {\n  const [scrollPosition, setScrollPosition] = useState<number>(0);\n\n  const getDocHeight = (): number => {\n    const bodyExists: boolean = document.body !== null;\n    const docElExists: boolean = document.documentElement !== null;\n    return Math.max(\n      bodyExists ? document.body.scrollHeight : 0,\n      docElExists ? document.documentElement.scrollHeight : 0,\n      bodyExists ? document.body.offsetHeight : 0,\n      docElExists ? document.documentElement.offsetHeight : 0,\n      bodyExists ? document.body.clientHeight : 0,\n      docElExists ? document.documentElement.clientHeight : 0\n    );\n  };\n\n  const calculateScrollDistance = (): void => {\n    const scrollTop: number = window.pageYOffset; // how much the user has scrolled by\n    const winHeight: number = window.innerHeight;\n    const docHeight: number = getDocHeight();\n\n    const totalDocScrollLength: number = docHeight - winHeight;\n    const currentScrollPostion: number = Math.floor(\n      (scrollTop / totalDocScrollLength) * 100\n    );\n\n    setScrollPosition(currentScrollPostion);\n  };\n\n  const scrollEvent = (): void => {\n    requestAnimationFrame(calculateScrollDistance);\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"scroll\", scrollEvent);\n    return () => window.removeEventListener(\"scroll\", scrollEvent);\n  });\n\n  const barBackground = `linear-gradient(to right, rgba(255, 255, 255, 0.9) ${scrollPosition}%, transparent 0)`;\n  return (\n    <div\n      style={{\n        position: \"fixed\",\n        background: barBackground,\n        width: \"100%\",\n        height: \"6px\",\n        zIndex: 10001,\n      }}\n    />\n  );\n};\n\nexport default memo(PageScrollProgress);\n","import { Suspense, lazy } from \"react\";\n\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\nimport Footer from \"./Footer\";\n\nimport IndeterminateLoadingIndicator from \"./IndeterminateLoadingIndicator\";\nimport PageScrollProgress from \"./PageScrollProgress\";\nconst RegistrationPage = lazy(() => import(\"./RegistrationPage\"));\nconst HistoryPage = lazy(() => import(\"./HistoryPage\"));\nconst MainPage = lazy(() => import(\"./MainPage\"));\nconst NotFoundPage = lazy(() => import(\"./NotFoundPage\"));\n\nconst App = () => (\n  <>\n    <PageScrollProgress />\n    <Router>\n      <Suspense fallback={<IndeterminateLoadingIndicator />}>\n        <main className=\"App\">\n          <Routes>\n            <Route path=\"/registration\" element={<RegistrationPage />} />\n            <Route path=\"/history\" element={<HistoryPage />} />\n            <Route path=\"/\" element={<MainPage />} />\n            <Route path=\"*\" element={<NotFoundPage />} />\n          </Routes>\n        </main>\n        <Footer />\n      </Suspense>\n    </Router>\n  </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      /* eslint-disable no-param-reassign */\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n      /* eslint-enable no-param-reassign */\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister(): void {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { StrictMode } from \"react\";\nimport { hydrate, render } from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n// import reportWebVitals from \"./reportWebVitals\";\n\n// Redirect to /2021:\n// window.location.href = \"https://hacktj.org/2021\";\n\nconst rootElement = document.getElementById(\"root\");\nconst app = (\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\nif (rootElement?.hasChildNodes()) {\n  hydrate(app, rootElement);\n} else {\n  render(app, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}