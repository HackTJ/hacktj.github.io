{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["RegistrationPage","lazy","HistoryPage","MainPage","NotFoundPage","App","fallback","style","margin","marginLeft","marginTop","xmlns","viewBox","className","cx","cy","r","fill","stroke","strokeWidth","strokeDasharray","strokeDashoffset","strokeLinecap","WebkitTransition","transition","exact","path","component","Boolean","window","location","hostname","match","l","search","q","slice","split","forEach","v","a","join","replace","undefined","p","history","replaceState","pathname","hash","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6OAIMA,EAAmBC,gBAAK,kBAAM,8DAC9BC,EAAcD,gBAAK,kBAAM,8DACzBE,EAAWF,gBAAK,kBAAM,qEACtBG,EAAeH,gBAAK,kBAAM,8DA4DjBI,EA1DH,WACV,OACE,kBAAC,IAAD,KACE,kBAAC,WAAD,CACEC,SACE,yBACEC,MAAO,CACLC,OAAQ,OACRC,WAAY,uBACZC,UAAW,yBAGb,yBACEC,MAAM,6BACNC,QAAQ,cACRC,UAAU,YAEV,4BACEC,GAAG,KACHC,GAAG,KACHC,EAAE,KACFT,MAAO,CACLU,KAAM,OACNC,OAAQ,0BACRC,YAAa,OAIjB,4BACEL,GAAG,KACHC,GAAG,KACHC,EAAE,KACFT,MAAO,CACLU,KAAM,OACNC,OAAQ,0BACRE,gBAAiB,UACjBC,iBAAkB,GAClBC,cAAe,QACfH,YAAa,IACbI,iBAAkB,mCAClBC,WAAY,yCAOtB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,gBAAgBC,UAAW3B,IAC7C,kBAAC,IAAD,CAAOyB,OAAK,EAACC,KAAK,WAAWC,UAAWzB,IACxC,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,IAAIC,UAAWxB,IACjC,kBAAC,IAAD,CAAOuB,KAAK,IAAIC,UAAWvB,QChDjBwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DCGN,SAAUC,GACR,GAAIA,EAAEC,OAAQ,CACZ,IAAIC,EAAI,GACRF,EAAEC,OACCE,MAAM,GACNC,MAAM,KACNC,SAAQ,SAASC,GAChB,IAAIC,EAAID,EAAEF,MAAM,KAChBF,EAAEK,EAAE,IAAMA,EACPJ,MAAM,GACNK,KAAK,KACLC,QAAQ,SAAU,aAEbC,IAARR,EAAES,GACJf,OAAOgB,QAAQC,aACb,KACA,KACAb,EAAEc,SAASX,MAAM,GAAI,IAAMD,EAAES,GAAK,KAAOT,EAAEA,EAAI,IAAMA,EAAEA,EAAI,IAAMF,EAAEe,OAjB3E,CAqBGnB,OAAOC,UAGVmB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoF3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3cab24b1.chunk.js","sourcesContent":["import React, { Suspense, lazy } from \"react\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nconst RegistrationPage = lazy(() => import(\"./RegistrationPage\"));\nconst HistoryPage = lazy(() => import(\"./HistoryPage\"));\nconst MainPage = lazy(() => import(\"./MainPage\"));\nconst NotFoundPage = lazy(() => import(\"./NotFoundPage\"));\n\nconst App = () => {\n  return (\n    <Router>\n      <Suspense\n        fallback={\n          <div\n            style={{\n              margin: \"auto\",\n              marginLeft: \"calc(50vw - 300px/2)\",\n              marginTop: \"calc(50vh - 300px/2)\"\n            }}\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"-1 -1 34 34\"\n              className=\"progress\"\n            >\n              <circle\n                cx=\"16\"\n                cy=\"16\"\n                r=\"16\"\n                style={{\n                  fill: \"none\",\n                  stroke: \"rgba(101, 216, 97, 0.2)\",\n                  strokeWidth: 1.8\n                }}\n              />\n\n              <circle\n                cx=\"16\"\n                cy=\"16\"\n                r=\"16\"\n                style={{\n                  fill: \"none\",\n                  stroke: \"rgba(101, 216, 97, 0.8)\",\n                  strokeDasharray: \"100 100\",\n                  strokeDashoffset: 70,\n                  strokeLinecap: \"round\",\n                  strokeWidth: 1.8,\n                  WebkitTransition: \"stroke-dashoffset 1s ease-in-out\",\n                  transition: \"stroke-dashoffset 1s ease-in-out\"\n                }}\n              />\n            </svg>\n          </div>\n        }\n      >\n        <Switch>\n          <Route exact path=\"/registration\" component={RegistrationPage} />\n          <Route exact path=\"/history\" component={HistoryPage} />\n          <Route exact path=\"/\" component={MainPage} />\n          <Route path=\"*\" component={NotFoundPage} />\n        </Switch>\n      </Suspense>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// Redirect to /2020:\n// window.location.href = \"https://hacktj.org/2020\";\n\n// Start Single Page Apps for GitHub Pages\n// Single Page Apps for GitHub Pages\n// https://github.com/rafrex/spa-github-pages\n// Copyright (c) 2016 Rafael Pedicini, licensed under the MIT License\n// ----------------------------------------------------------------------\n// This script checks to see if a redirect is present in the query string\n// and converts it back into the correct url and adds it to the\n// browser's history using window.history.replaceState(...),\n// which won't cause the browser to attempt to load the new url.\n// When the single page app is loaded further down in this file,\n// the correct url will be waiting in the browser's history for\n// the single page app to route accordingly.\n(function(l) {\n  if (l.search) {\n    var q = {};\n    l.search\n      .slice(1)\n      .split(\"&\")\n      .forEach(function(v) {\n        var a = v.split(\"=\");\n        q[a[0]] = a\n          .slice(1)\n          .join(\"=\")\n          .replace(/~and~/g, \"&\");\n      });\n    if (q.p !== undefined) {\n      window.history.replaceState(\n        null,\n        null,\n        l.pathname.slice(0, -1) + (q.p || \"\") + (q.q ? \"?\" + q.q : \"\") + l.hash\n      );\n    }\n  }\n})(window.location);\n// End Single Page Apps for GitHub Pages\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}